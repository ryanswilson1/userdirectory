{"version":3,"sources":["components/Nav/index.js","components/Card/index.js","components/Grid/Container.js","pages/EmployeeDirectory.js","utils/API.js","utils/sortFunctions.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","query","onInputChange","onSortChange","currentKey","currentOrder","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","key","label","map","style","color","onClick","onChange","value","placeholder","Card","children","data-id","Container","fluid","EmployeeDirectory","props","employees","length","employee","login","uuid","src","picture","large","alt","name","first","last","email","phone","toString","getUsers","axios","get","sortFunctions","compareValues","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","App","useState","employeesList","setEmployeesList","setEmployees","searchOptions","setSearchOptions","API","response","data","results","console","log","useEffect","loadEmployeesList","filtered","e","firstName","lastName","fullName","filter","toLowerCase","includes","sort","target","currentSearchOptions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAyEeA,MAtEf,YAAgF,IAAjEC,EAAgE,EAAhEA,MAAOC,EAAyD,EAAzDA,cAAeC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAgB3D,OACI,sBAAKC,UAAU,8EAAf,UACI,mBAAGA,UAAU,mCAAmCC,KAAK,IAArD,sCAGA,wBACID,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,oBAPf,SASI,sBAAMP,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BQ,GAAG,yBAA7C,UACI,qBAAIR,UAAU,qBAAd,UACI,sBAAMA,UAAU,cAAhB,uBAjCF,CACV,CACIS,IAAK,YACLC,MAAO,cAEX,CACID,IAAK,WACLC,MAAO,aAEX,CACID,IAAK,QACLC,MAAO,iBAuBQC,KAAI,gBAAGF,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,OACP,oBAAcV,UAAU,eAAxB,SACI,yBACIY,MAAOd,IAAeW,EAAM,CAAEI,MAAO,aAAgB,GACrDC,QAAS,kBACLjB,EAAaY,EAAsB,QAAjBV,EAAyB,OAAS,QAExDC,UAAU,MALd,UAOKU,EAPL,IAQQZ,IAAeW,EACT,GACiB,QAAjBV,EACK,mBAAGC,UAAU,+BACb,mBAAGA,UAAU,iCAb3BS,SAmBjB,sBAAMT,UAAU,2BAAhB,SACI,uBACIe,SAAUnB,EACVI,UAAU,uBACVE,KAAK,SACLc,MAAOrB,EACPsB,YAAY,SACZV,aAAW,oB,MC7DpB,SAASW,EAAT,GAAiC,IAAjBV,EAAgB,EAAhBA,GAAIW,EAAY,EAAZA,SAC/B,OACI,qBAAKnB,UAAU,yBAAyBoB,UAASZ,EAAjD,SACKW,ICJN,SAASE,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOH,EAAY,EAAZA,SAC/B,OAAO,qBAAKnB,UAAS,mBAAcsB,EAAQ,SAAW,IAA/C,SAAsDH,I,MC4BlDI,MA3Bf,SAA2BC,GACvB,OACI,cAACH,EAAD,CAAWC,OAAK,EAAhB,SACKE,EAAMC,UAAUC,OACb,qBAAK1B,UAAU,0CAAf,SAEQwB,EAAMC,UAAUd,KAAI,SAAAgB,GAChB,OACI,eAACT,EAAD,CAA2CV,GAAImB,EAASC,MAAMC,KAA9D,UACI,qBAAK7B,UAAU,eAAe8B,IAAKH,EAASI,QAAQC,MAAOC,IAAKN,EAASO,KAAKC,QAC9E,sBAAKnC,UAAU,YAAf,UACI,qBAAIA,UAAU,aAAd,UAA4B2B,EAASO,KAAKC,MAA1C,IAAkDR,EAASO,KAAKE,QAChE,oBAAGpC,UAAU,YAAb,oBAAiC2B,EAASU,SAC1C,oBAAGrC,UAAU,YAAb,oBAAiC2B,EAASW,cALvCX,EAASC,MAAMC,KAAKU,iBAa3C,qBAAKvC,UAAU,iBAAf,SAAgC,8BAAK,mBAAGA,UAAU,mC,iBCjBvDwC,EANE,CACbA,SAAU,WACN,OAAOC,IAAMC,IAAI,sFCwBVC,EA5BO,CAElBC,cAAe,SAAUnC,GAAqB,IAAhBoC,EAAe,uDAAP,MAClC,OAAO,SAAmBC,EAAGC,GACzB,IAAKD,EAAEE,eAAevC,KAASsC,EAAEC,eAAevC,GAE5C,OAAO,EAGX,IAAMwC,EAA0B,kBAAXH,EAAErC,GACjBqC,EAAErC,GAAKyC,cAAgBJ,EAAErC,GACzB0C,EAA0B,kBAAXJ,EAAEtC,GACjBsC,EAAEtC,GAAKyC,cAAgBH,EAAEtC,GAE3B2C,EAAa,EAMjB,OALIH,EAAOE,EACPC,EAAa,EACNH,EAAOE,IACdC,GAAc,GAGH,SAAVP,GAAmC,EAAdO,EAAmBA,KCgE1CC,MAhFf,WAAe,MAE6BC,mBAAS,IAFtC,mBAENC,EAFM,KAESC,EAFT,OAIqBF,mBAAS,IAJ9B,mBAIN7B,EAJM,KAIKgC,EAJL,OAM6BH,mBAAS,CACjD7C,IAAK,YACLoC,MAAO,MACPlD,MAAO,KATI,mBAMN+D,EANM,KAMSC,EANT,iDAyDb,4BAAAb,EAAA,+EAE2Bc,EAAIpB,WAF/B,OAEUqB,EAFV,OAGIL,EAAiBK,EAASC,KAAKC,SAHnC,gDAKIC,QAAQC,IAAR,MALJ,0DAzDa,sBAkEb,OApCAC,qBAAU,YA9BG,mCA+BXC,KACC,IAGHD,qBAAU,WACR,IAOME,EAPWb,EAAc5C,KAAI,SAAC0D,GAAD,mBAAC,eAC/BA,GAD8B,IAEjCC,UAAWD,EAAEnC,KAAKC,MAClBoC,SAAUF,EAAEnC,KAAKE,KACjBoC,SAAS,GAAD,OAAKH,EAAEnC,KAAKC,MAAZ,YAAqBkC,EAAEnC,KAAKE,WAGZqC,QAAO,SAAC9C,GAAD,OAC/BA,EAAS6C,SACNE,cACAC,SAASjB,EAAc/D,MAAM+E,kBAGlCN,EAASQ,KACPjC,EAAcC,cAAcc,EAAcjD,IAAKiD,EAAcb,QAG/DY,EAAaW,KACZ,CAACb,EAAeG,IAajB,gCACE,cAAC,EAAD,CACE/D,MAAO+D,EAAc/D,MACrBC,cA1DgB,SAACyE,GAAO,IACpBrD,EAAUqD,EAAEQ,OAAZ7D,MAER2C,GAAiB,SAACmB,GAAD,mBAAC,eACbA,GADY,IAEfnF,MAAOqB,QAsDLnB,aAlDe,SAACY,EAAKoC,GACzBc,GAAiB,SAACmB,GAAD,mBAAC,eACbA,GADY,IAEfrE,MACAoC,cA+CE/C,WAAY4D,EAAcjD,IAC1BV,aAAc2D,EAAcb,QAE9B,cAAC,EAAD,CAAmBpB,UAAWA,QCrErBsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.839179a6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav({ query, onInputChange, onSortChange, currentKey, currentOrder }) {\n    const sorts = [\n        {\n            key: \"firstName\",\n            label: \"First Name\",\n        },\n        {\n            key: \"lastName\",\n            label: \"Last Name\",\n        },\n        {\n            key: \"phone\",\n            label: \"Phone Number\",\n        },\n    ];\n\n    return (\n        <nav className='navbar navbar-expand-lg navbar-dark bg-primary justify-content-between mb-2'>\n            <a className='navbar-brand bg-primary navTitle' href='/'>\n                React Employee Directory\n      </a>\n            <button\n                className='navbar-toggler'\n                type='button'\n                data-toggle='collapse'\n                data-target='#navbarSupportedContent'\n                aria-controls='navbarSupportedContent'\n                aria-expanded='false'\n                aria-label='Toggle navigation'\n            >\n                <span className='navbar-toggler-icon'></span>\n            </button>\n            <div className='collapse navbar-collapse' id='navbarSupportedContent'>\n                <ul className='navbar-nav mr-auto'>\n                    <span className='navbar-text'>Sort by: </span>\n                    {sorts.map(({ key, label }) => (\n                        <li key={key} className='nav-item m-1'>\n                            <button\n                                style={currentKey === key ? { color: \"orangered\" } : {}}\n                                onClick={() =>\n                                    onSortChange(key, currentOrder === \"asc\" ? \"desc\" : \"asc\")\n                                }\n                                className='btn'\n                            >\n                                {label} {\n                                    currentKey !== key\n                                        ? \"\"\n                                        : currentOrder === \"asc\"\n                                            ? (<i className=\"fas fa-chevron-circle-down\"></i>)\n                                            : (<i className=\"fas fa-chevron-circle-up\"></i>)\n                                }\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n                <form className='form-inline my-2 my-lg-0'>\n                    <input\n                        onChange={onInputChange}\n                        className='form-control mr-sm-2'\n                        type='search'\n                        value={query}\n                        placeholder='Search'\n                        aria-label='Search'\n                    />\n                </form>\n            </div>\n        </nav>\n    );\n}\n\nexport default Nav;","\nimport React from \"react\";\nimport './card.css';\n\nexport default function Card({ id, children }) {\n    return (\n        <div className=\"card employeeCard my-2\" data-id={id} >\n            {children}\n        </div>\n    );\n}","\nimport React from \"react\";\n\nexport function Container({ fluid, children }) {\n    return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}","import React from 'react';\nimport Card from '../components/Card';\nimport { Container } from '../components/Grid/Container';\nimport './employeeDirectory.css';\n\nfunction EmployeeDirectory(props) {\n    return (\n        <Container fluid>\n            {props.employees.length ? (\n                <div className=\"card-deck d-flex justify-content-center\">\n                    {\n                        props.employees.map(employee => {\n                            return (\n                                <Card key={employee.login.uuid.toString()} id={employee.login.uuid}>\n                                    <img className=\"card-img-top\" src={employee.picture.large} alt={employee.name.first} />\n                                    <div className=\"card-body\">\n                                        <h5 className=\"card-title\">{employee.name.first} {employee.name.last}</h5>\n                                        <p className=\"card-text\">Email: {employee.email}</p>\n                                        <p className=\"card-text\">Phone: {employee.phone}</p>\n                                    </div>\n                                </Card>\n                            );\n                        })\n                    }\n                </div>\n            ) : (\n                    <div className=\"absoluteCenter\"><div><i className=\"fas fa-spinner fa-pulse\"></i></div></div>\n                )}\n        </Container>\n    )\n};\n\nexport default EmployeeDirectory;","\nimport axios from 'axios';\n\nconst getUsers = {\n    getUsers: function () {\n        return axios.get('https://randomuser.me/api/?results=100&nat=us&inc=name,email,phone,login,picture');\n    }\n}\n\nexport default getUsers;","\nconst sortFunctions = {\n    // To be used with a sort function: Ex. singers.sort(compareValues('band', 'desc'));\n    compareValues: function (key, order = 'asc') {\n        return function innerSort(a, b) {\n            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n                // property doesn't exist on either object\n                return 0;\n            }\n\n            const varA = (typeof a[key] === 'string')\n                ? a[key].toUpperCase() : a[key];\n            const varB = (typeof b[key] === 'string')\n                ? b[key].toUpperCase() : b[key];\n\n            let comparison = 0;\n            if (varA > varB) {\n                comparison = 1;\n            } else if (varA < varB) {\n                comparison = -1;\n            }\n            return (\n                (order === 'desc') ? (comparison * -1) : comparison\n            );\n        };\n    },\n\n};\n\nexport default sortFunctions;","import React, { useState, useEffect } from \"react\";\nimport Nav from \"./components/Nav\";\nimport EmployeeDirectory from \"./pages/EmployeeDirectory\";\nimport API from \"./utils/API\";\nimport sortFunctions from \"./utils/sortFunctions\";\n\nfunction App() {\n  // EmployeesList is the master list, derived from the API.\n  const [employeesList, setEmployeesList] = useState([]);\n  // Employees is the array to be modified with sorting & filtering.\n  const [employees, setEmployees] = useState([]);\n\n  const [searchOptions, setSearchOptions] = useState({\n    key: \"firstName\",\n    order: \"asc\",\n    query: \"\",\n  });\n\n  const onQueryChange = (e) => {\n    const { value } = e.target;\n\n    setSearchOptions((currentSearchOptions) => ({\n      ...currentSearchOptions,\n      query: value,\n    }));\n  };\n\n  const onSortChange = (key, order) => {\n    setSearchOptions((currentSearchOptions) => ({\n      ...currentSearchOptions,\n      key,\n      order,\n    }));\n  };\n\n  // Load all employees and store them with setEmployeesList\n  useEffect(() => {\n    loadEmployeesList();\n  }, []);\n\n  // Only sets employees array once employeesList has changed.\n  useEffect(() => {\n    const modified = employeesList.map((e) => ({\n      ...e,\n      firstName: e.name.first,\n      lastName: e.name.last,\n      fullName: `${e.name.first} ${e.name.last}`,\n    }));\n\n    const filtered = modified.filter((employee) =>\n      employee.fullName\n        .toLowerCase()\n        .includes(searchOptions.query.toLowerCase())\n    );\n\n    filtered.sort(\n      sortFunctions.compareValues(searchOptions.key, searchOptions.order)\n    );\n\n    setEmployees(filtered);\n  }, [employeesList, searchOptions]);\n\n  // Loads all employees and sets them to employeesList\n  async function loadEmployeesList() {\n    try {\n      const response = await API.getUsers();\n      setEmployeesList(response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div>\n      <Nav\n        query={searchOptions.query}\n        onInputChange={onQueryChange}\n        onSortChange={onSortChange}\n        currentKey={searchOptions.key}\n        currentOrder={searchOptions.order}\n      />\n      <EmployeeDirectory employees={employees}></EmployeeDirectory>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}